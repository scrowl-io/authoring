{{#with . as | data |}}
const domContainer = document.querySelector('#scrowl-player');
const root = ReactDOM.createRoot(domContainer);
const e = React.createElement;

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      connected: false,
      focusElement: '',
      schema: {
        content: {{{data.templateContent}}},
        controlOptions: {{{data.templateControls}}}
      }
    };
    this.onMessage = this.onMessage.bind(this);
  }
  setSchema = (data) => {
    this.setState({ schema: { content: data.content, controlOptions: data.controlOptions } });
  }
  setConnection = (data) => {
    this.setState({ connected: data });
  }
  setFocusElement = (data) => {
    this.setState({ focusElement: data });
  }
  onMessage(ev) {
    const isConnected = this.state.connected;
    const setConnection = this.setConnection;
    const setSchema = this.setSchema;
    const setFocusElement = this.setFocusElement;

    if (!isConnected) {
      ev.ports[0].postMessage({ type: 'connection' });
      setConnection(true);
      Scrowl.core.host.connect();
      return;
    }

    switch (ev.data.type) {
      case 'update':
        setSchema(ev.data.data);
        break;
      case 'focus':
        setFocusElement(ev.data.field);
        break;
    }
  }
  componentDidMount() {
    window.addEventListener('message', this.onMessage, false);
  }
  componentWillUnmount() {
    window.removeEventListener('message', this.onMessage, false);
  }
  render() {
    const schema = this.state.schema;

    if (!Object.keys(schema.content).length) {
      return e('main', { className: 'lesson-wrapper' });
    }

    const controller = new Scrowl.core.scroll.Controller();
    const focusElement = this.state.focusElement;
    const Template = e(
      {{data.templateComponent}},
      {
        id: 'canvas-template',
        editMode: true,
        controller,
        schema,
        focusElement,
      },
      null
    );
    const Lesson = e('div', { className: 'lesson' }, Template);

    return e('main', { className: 'lesson-wrapper' }, Lesson);
  }
}

root.render(e(App));
{{/with}}