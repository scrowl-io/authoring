{"version":3,"file":"scrowl.runtime.js","mappings":"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","sources":["webpack://@scrowl/runtime/webpack/universalModuleDefinition","webpack://@scrowl/runtime/webpack/bootstrap","webpack://@scrowl/runtime/webpack/runtime/make namespace object","webpack://@scrowl/runtime/./src/versions/runtimeScorm2004.ts","webpack://@scrowl/runtime/./src/versions/runtimeScorm12.ts","webpack://@scrowl/runtime/./src/runtime.ts","webpack://@scrowl/runtime/./web/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\n  SCORM API REF\n  https://scorm.com/scorm-explained/technical-scorm/run-time/run-time-reference/\n*/\nimport { RUNTIME_SERVICE } from '../runtime.types';\n\nexport const service: RUNTIME_SERVICE = {\n  version: '2004v3',\n  init: false,\n  finished: false,\n  _time: {\n    startTime: undefined,\n    getSessionTime: () => {\n      let sessionTime;\n      if (service._time.startTime) {\n        sessionTime = new Date().getTime() - service._time.startTime.getTime();\n      }\n      return service._time.convert(sessionTime);\n    },\n    end: undefined,\n    convert: (total) => {\n      let totalMs = total % 1000;\n      let totalS = ((total - totalMs) / 1000) % 60;\n      let totalM = ((total - totalMs - totalS * 1000) / 60000) % 60;\n      let totalH = (total - totalMs - totalS * 1000 - totalM * 60000) / 3600000;\n\n      if (totalH == 10000) {\n        totalH = 9999;\n        totalM = (total - totalH * 3600000) / 60000;\n\n        if (totalM == 100) {\n          totalM = 99;\n        }\n\n        totalM = Math.floor(totalM);\n        totalS = (total - totalH * 3600000 - totalM * 60000) / 1000;\n\n        if (totalS == 100) {\n          totalS = 99;\n        }\n\n        totalS = Math.floor(totalS);\n        totalMs = total - totalH * 3600000 - totalM * 60000 - totalS * 1000;\n      }\n\n      let timespan = 'PT' + totalH + 'H' + totalM + 'M' + totalS + 'S';\n\n      if (totalH > 9999) {\n        timespan = '9999:99:99';\n      }\n\n      return timespan;\n    },\n  },\n  API: null,\n  getError: (printError) => {\n    printError =\n      printError === undefined || printError === null ? true : printError;\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit) {\n      return {\n        error: true,\n        message: 'Service is not initialized',\n      };\n    }\n\n    const errorId = API.GetLastError();\n    const errorMsg = API.GetErrorString(errorId);\n    const errorStack = API.GetDiagnostic(errorId);\n    const apiError = {\n      id: errorId,\n      message: errorMsg,\n      stack: errorStack,\n    };\n\n    if (printError) {\n      console.error(`Error:\\n${JSON.stringify(apiError, null, 2)}`);\n      const errorEvent = new CustomEvent('scormError', {\n        detail: apiError,\n      });\n      document.dispatchEvent(errorEvent);\n\n      return {\n        error: true,\n        data: apiError,\n      };\n    }\n\n    return {\n      error: false,\n      data: apiError,\n    };\n  },\n  commit: () => {\n    console.debug(`API.Commit`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get location: service not initialized`);\n      return [true];\n    }\n\n    service.setValue('cmi.session_time', service._time.getSessionTime());\n    API.Commit('');\n    return [false];\n  },\n  exit: () => {\n    console.debug('API.Exit');\n    return service.commit();\n  },\n  isInitialized: () => {\n    service.init = false;\n\n    if (!service.API) {\n      console.error('MISSING_SCORM_API - INIT');\n      return [service.init, false];\n    }\n\n    // @ts-ignore\n    if (service.API.Initialized === 'false') {\n      console.error('API failed to initialize');\n      return [service.init, false];\n    }\n\n    service.init = true;\n    return [service.init, service.API];\n  },\n  updateLocation: (location, slideId) => {\n    console.debug(`API.UpdateLocation`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get location: service not initialized`);\n      return [true];\n    }\n\n    service.setValue(\n      'cmi.location',\n      JSON.stringify({ v1: 1, ...location, slideId: slideId })\n    );\n\n    service.commit();\n    return [false];\n  },\n  getLocation: () => {\n    console.debug(`API.GetLocation`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get location: service not initialized`);\n      return [true, {}];\n    }\n    try {\n      const [error, location] = service.getValue('cmi.location');\n\n      if (error || !location) {\n        return [true, {}];\n      }\n\n      return [false, JSON.parse(location)];\n    } catch (e) {\n      console.error(e);\n      return [true, {}];\n    }\n  },\n  getSuspendData: () => {\n    console.debug(`API.GetSuspendData`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get suspend data: service not initialized`);\n      return [true, {}];\n    }\n    try {\n      const [error, suspendData] = service.getValue('cmi.suspend_data');\n\n      if (error || !suspendData) {\n        return [true, {}];\n      }\n\n      return [false, suspendData];\n    } catch (e) {\n      console.error(e);\n      return [true, {}];\n    }\n  },\n  setCourseStart: () => {\n    console.debug(`API.SetCourseStart`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to update suspend data: service not initialized`);\n      return [true, {}];\n    }\n    service.setValue(\n      'cmi.suspend_data',\n      JSON.stringify({ courseStarted: true })\n    );\n    service.commit();\n\n    return [false];\n  },\n  getProgress: () => {\n    console.debug(`API.GetProgress`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get progress: service not initialized`);\n      return [true, {}];\n    }\n\n    try {\n      const [error, progress] = service.getValue('cmi.progress_measure');\n\n      if (error || !progress) {\n        return [true, {}];\n      }\n\n      return [false, progress];\n    } catch (e) {\n      console.error(e);\n      return [true, {}];\n    }\n  },\n  updateProgress: (progressPercentage) => {\n    console.debug(`API.UpdateProgress`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to update progress: service not initialized`);\n      return [true];\n    }\n\n    const [progressError, previousProgress] = service.getValue(\n      'cmi.progress_measure'\n    );\n\n    // error 403 = Data Model Element Value Not Initialized (first time setting progress)\n    // @ts-ignore\n    if (progressError && previousProgress.data.id === '403') {\n      service.setValue('cmi.progress_measure', progressPercentage);\n      service.commit();\n    }\n\n    if (!progressError) {\n      if (\n        !previousProgress ||\n        parseFloat(previousProgress) === 0 ||\n        progressPercentage > parseFloat(previousProgress)\n      ) {\n        service.setValue('cmi.progress_measure', progressPercentage);\n      }\n      service.commit();\n    }\n\n    return [false];\n  },\n  start: (api) => {\n    console.debug(`API.Start 2004v3`);\n\n    service.API = api;\n    service._time.startTime = new Date();\n    service.API?.Initialize('');\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      return [true];\n    }\n\n    const [statusError, completionStatus] = service.getValue(\n      'cmi.completion_status'\n    );\n\n    if (statusError) {\n      return [true];\n    }\n\n    if (completionStatus === 'unknown') {\n      service.setValue('cmi.completion_status', 'incomplete');\n      service.setValue('cmi.success_status', 'unknown');\n      service.setValue('cmi.suspend_data', '{}');\n      service.setValue('cmi.progress_measure', 0);\n      const startLocation = {\n        cur: {\n          m: 0,\n          l: 0,\n          s: 0,\n        },\n        max: {\n          m: 0,\n          l: 0,\n          s: 0,\n        },\n      };\n      service.setValue('cmi.location', JSON.stringify(startLocation));\n    } else {\n      service.setValue(\n        'cmi.success_status',\n        service.getValue('cmi.success_status')[1]\n      );\n      service.setValue(\n        'cmi.progress_measure',\n        service.getValue('cmi.progress_measure')[1]\n      );\n      service.setValue(\n        'cmi.completion_status',\n        service.getValue('cmi.completion_status')[1]\n      );\n    }\n\n    // until we have things hooked up to exit buttons/nav, set exit to 'suspend' as part of start() so that status persists whether the user finishes or exits\n    service.setValue('cmi.exit', 'suspend');\n    service.commit();\n\n    console.debug('runtime started');\n\n    return [false];\n  },\n  finish: () => {\n    console.debug(`API.Finish`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to finish: service not initialized`);\n      return [true];\n    }\n\n    service.setValue('cmi.score.min', 0);\n    service.setValue('cmi.score.max', 100);\n    service.setValue('cmi.score.scaled', 1);\n    service.setValue('cmi.score.raw', 100);\n    service.setValue('cmi.success_status', 'passed');\n    service.setValue('cmi.progress_measure', 1);\n    service.setValue('cmi.completion_status', 'completed');\n    service.commit();\n    API.Terminate('');\n\n    return [false];\n  },\n  setValue: (elem, val) => {\n    console.debug(`API.SetValue for ${elem} to ${val}`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to set value for ${elem}: service not initialized`);\n      return [true];\n    }\n\n    if (val !== undefined) {\n      if (API.SetValue(elem, val) === 'false') {\n        service.getError(true);\n      }\n    } else {\n      console.warn(`Unable to set value for ${elem}: value undefined`);\n    }\n\n    return [false];\n  },\n  getValue: (elem) => {\n    console.debug(`API.GetValue for ${elem}`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to set value for ${elem}: service not initialized`);\n      return [true, ''];\n    }\n\n    const getRes = API.GetValue(elem);\n\n    if (getRes === '') {\n      console.error(`API failed to get value for: ${elem}`);\n      service.getError(true);\n    }\n\n    return [false, getRes];\n  },\n};\n\nexport default {\n  service,\n};\n","/*\n  SCORM API REF\n  https://scorm.com/scorm-explained/technical-scorm/run-time/run-time-reference/\n*/\nimport { RUNTIME_SERVICE } from '../runtime.types';\n\nexport const service: RUNTIME_SERVICE = {\n  version: '1.2',\n  init: false,\n  finished: false,\n  _time: {\n    startTime: undefined,\n    getSessionTime: () => {\n      let sessionTime;\n      if (service._time.startTime) {\n        sessionTime = new Date().getTime() - service._time.startTime.getTime();\n      }\n      return service._time.convert(sessionTime);\n    },\n    end: undefined,\n    convert: (total) => {\n      function ZeroPad(val: number, pad: number) {\n        let res = new String(val);\n        const len = res.length;\n\n        if (len > pad) {\n          return res.substr(0, pad);\n        }\n\n        for (let i = len; i < pad; i++) {\n          res = '0' + res;\n        }\n\n        return res;\n      }\n\n      let totalMs = total % 1000;\n      let totalS = ((total - totalMs) / 1000) % 60;\n      let totalM = ((total - totalMs - totalS * 1000) / 60000) % 60;\n      let totalH = (total - totalMs - totalS * 1000 - totalM * 60000) / 3600000;\n\n      if (totalH == 10000) {\n        totalH = 9999;\n        totalM = (total - totalH * 3600000) / 60000;\n\n        if (totalM == 100) {\n          totalM = 99;\n        }\n\n        totalM = Math.floor(totalM);\n        totalS = (total - totalH * 3600000 - totalM * 60000) / 1000;\n\n        if (totalS == 100) {\n          totalS = 99;\n        }\n\n        totalS = Math.floor(totalS);\n        totalMs = total - totalH * 3600000 - totalM * 60000 - totalS * 1000;\n      }\n\n      // should eventually check SCORM version and format time accordingly\n      let timespan =\n        ZeroPad(totalH, 4) +\n        ':' +\n        ZeroPad(totalM, 2) +\n        ':' +\n        ZeroPad(totalS, 2);\n\n      if (totalH > 9999) {\n        timespan = '9999:99:99';\n      }\n\n      return timespan;\n    },\n  },\n  API: null,\n  getError: (printError) => {\n    printError =\n      printError === undefined || printError === null ? true : printError;\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit) {\n      return {\n        error: true,\n        message: 'Service is not initialized',\n      };\n    }\n\n    const errorId = API.LMSGetLastError();\n    const errorMsg = API.LMSGetErrorString(errorId);\n    const errorStack = API.LMSGetDiagnostic(errorId);\n    const apiError = {\n      id: errorId,\n      message: errorMsg,\n      stack: errorStack,\n    };\n\n    if (printError) {\n      console.error(`Error:\\n${JSON.stringify(apiError, null, 2)}`);\n      const errorEvent = new CustomEvent('scormError', {\n        detail: apiError,\n      });\n      document.dispatchEvent(errorEvent);\n    }\n\n    return {\n      error: false,\n      data: apiError,\n    };\n  },\n  commit: () => {\n    console.debug(`API.Commit`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get location: service not initialized`);\n      return [true];\n    }\n\n    service.setValue('cmi.core.session_time', service._time.getSessionTime());\n    API.LMSCommit('');\n    return [false];\n  },\n  exit: () => {\n    console.debug('API.Exit');\n    return service.commit();\n  },\n  isInitialized: () => {\n    service.init = false;\n\n    if (!service.API) {\n      console.error('MISSING_SCORM_API - INIT');\n      return [service.init, false];\n    }\n\n    // @ts-ignore\n    if (service.API.Initialized === 'false') {\n      console.error('API failed to initialize');\n      return [service.init, false];\n    }\n\n    service.init = true;\n    return [service.init, service.API];\n  },\n  updateLocation: (location, slideId) => {\n    console.debug(`API.UpdateLocation`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get location: service not initialized`);\n      return [true];\n    }\n\n    service.setValue(\n      'cmi.core.lesson_location',\n      JSON.stringify({ v1: 1, ...location, slideId: slideId })\n    );\n\n    service.commit();\n    return [false];\n  },\n  getLocation: () => {\n    console.debug(`API.GetLocation`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get location: service not initialized`);\n      return [true, {}];\n    }\n    try {\n      const [error, location] = service.getValue('cmi.core.lesson_location');\n\n      if (error || !location) {\n        return [true, {}];\n      }\n\n      return [false, JSON.parse(location)];\n    } catch (e) {\n      console.error(e);\n      return [true, {}];\n    }\n  },\n  setCourseStart: () => {\n    console.debug(`API.SetCourseStart`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to set suspend data: service not initialized`);\n      return [true, {}];\n    }\n    service.setValue(\n      'cmi.suspend_data',\n      JSON.stringify({ courseStarted: true })\n    );\n    service.commit();\n\n    return [false];\n  },\n  getSuspendData: () => {\n    console.debug(`API.GetSuspendData`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get suspend data: service not initialized`);\n      return [true, {}];\n    }\n\n    try {\n      const [error, suspendData] = service.getValue('cmi.suspend_data');\n\n      if (error || !suspendData) {\n        return [true, {}];\n      }\n\n      return [false, suspendData];\n    } catch (e) {\n      console.error(e);\n      return [true, {}];\n    }\n  },\n  getProgress: () => {\n    console.debug(`API.GetProgress`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to get progress: service not initialized`);\n      return [true, {}];\n    }\n\n    try {\n      const [error, progress] = service.getValue('cmi.suspend_data');\n\n      if (error || !progress) {\n        return [true, {}];\n      }\n\n      return [false, progress];\n    } catch (e) {\n      console.error(e);\n      return [true, {}];\n    }\n  },\n  updateProgress: (progressPercentage) => {\n    console.debug(`API.UpdateProgress`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to update progress: service not initialized`);\n      return [true];\n    }\n\n    const [progressError, previousProgress] =\n      service.getValue('cmi.suspend_data');\n\n    // error 403 = Data Model Element Value Not Initialized (first time setting progress)\n    // @ts-ignore\n    if (progressError && previousProgress.data.id === '403') {\n      service.setValue('cmi.suspend_data', progressPercentage);\n      service.commit();\n    }\n\n    if (!progressError) {\n      if (\n        !previousProgress ||\n        parseFloat(previousProgress) === 0 ||\n        progressPercentage > parseFloat(previousProgress)\n      ) {\n        service.setValue('cmi.suspend_data', progressPercentage);\n      }\n      service.commit();\n    }\n\n    return [false];\n  },\n  start: (api) => {\n    console.debug(`API.Start 1.2`);\n    service._time.startTime = new Date();\n\n    service.API = api;\n\n    service.API?.LMSInitialize('');\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      return [true];\n    }\n\n    const [statusError, lessonStatus] = service.getValue(\n      'cmi.core.lesson_status'\n    );\n\n    if (statusError) {\n      return [true];\n    }\n\n    if (lessonStatus === 'unknown' || lessonStatus === 'not attempted') {\n      service.setValue('cmi.core.lesson_status', 'incomplete');\n      service.setValue('cmi.suspend_data', 0);\n\n      const startLocation = {\n        cur: {\n          m: 0,\n          l: 0,\n          s: 0,\n        },\n        max: {\n          m: 0,\n          l: 0,\n          s: 0,\n        },\n      };\n      service.setValue(\n        'cmi.core.lesson_location',\n        JSON.stringify(startLocation)\n      );\n    } else {\n      service.setValue(\n        'cmi.core.lesson_status',\n        service.getValue('cmi.core.lesson_status')[1]\n      );\n      service.setValue(\n        'cmi.suspend_data',\n        service.getValue('cmi.suspend_data')[1]\n      );\n    }\n\n    // until we have things hooked up to exit buttons/nav, set exit to 'suspend' as part of start() so that status persists whether the user finishes or exits\n    service.setValue('cmi.core.exit', 'suspend');\n    service.commit();\n\n    console.debug('runtime started');\n\n    return [false];\n  },\n  finish: () => {\n    console.debug(`API.Finish`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to finish: service not initialized`);\n      return [true];\n    }\n\n    service.setValue('cmi.core.score.raw', 100);\n    service.setValue('cmi.core.lesson_status', 'passed');\n    service.setValue('cmi.suspend_data', 1);\n    service.commit();\n    API.LMSFinish('');\n\n    return [false];\n  },\n  setValue: (elem, val) => {\n    console.debug(`API.SetValue for ${elem} to ${val}`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to set value for ${elem}: service not initialized`);\n      return [true];\n    }\n\n    if (val !== undefined) {\n      if (API.LMSSetValue(elem, val) === 'false') {\n        service.getError(true);\n      }\n    } else {\n      console.warn(`Unable to set value for ${elem}: value undefined`);\n    }\n\n    return [false];\n  },\n  getValue: (elem) => {\n    console.debug(`API.GetValue for ${elem}`);\n\n    const [isInit, API] = service.isInitialized();\n\n    if (!isInit || !API) {\n      console.warn(`Unable to set value for ${elem}: service not initialized`);\n      return [true, ''];\n    }\n\n    const getRes = API.LMSGetValue(elem);\n\n    if (getRes === '') {\n      console.error(`API failed to get value for: ${elem}`);\n      service.getError(true);\n    }\n\n    return [false, getRes];\n  },\n};\n\nexport default {\n  service,\n};\n","/*\n  SCORM API REF\n  https://scorm.com/scorm-explained/technical-scorm/run-time/run-time-reference/\n*/\nimport { RUNTIME_SERVICE_WRAPPER } from './runtime.types';\nimport { service as service2004 } from '../src/versions/runtimeScorm2004';\nimport { service as service12 } from '../src/versions/runtimeScorm12';\n\nexport const service: RUNTIME_SERVICE_WRAPPER = {\n  API: null,\n  version: '1.2',\n  _scanApi: (win, v) => {\n    let retries = 0;\n    // Check to see if the window (win) contains the API\n    // if the window (win) does not contain the API and\n    // the window (win) has a parent window and the parent window\n    // is not the same as the window (win)\n\n    while (win[v] == null && win.parent != null && win.parent != win) {\n      // increment the number of findAPITries\n      retries++;\n\n      // Note: 7 is an arbitrary number, but should be more than sufficient\n      if (retries > 7) {\n        alert('Error finding API -- too deeply nested.');\n        return null;\n      }\n\n      // set the variable that represents the window being\n      // being searched to be the parent of the current window\n      // then search for the API again\n      win = win.parent;\n    }\n\n    return win[v];\n  },\n  // @ts-ignore\n  start: (apiPreference) => {\n    let API;\n\n    switch (apiPreference) {\n      case service2004.version:\n        API = service._scanApi(window, 'API_1484_11');\n        service.version = apiPreference;\n        Object.assign(service, service2004);\n        break;\n      case service12.version:\n      default:\n        API = service._scanApi(window, 'API');\n        service.version = apiPreference;\n        Object.assign(service, service12);\n        break;\n    }\n\n    if (!API) {\n      console.error('Unable to start scorm runtime service');\n      return [false];\n    }\n\n    service.API = API;\n\n    // @ts-ignore\n    service.start(API);\n\n    return [true];\n  },\n};\n\nexport default {\n  service,\n}\n","import { service } from '../src';\n\nwindow.Scrowl = window.Scrowl || {};\n\n// @ts-ignore\nwindow.Scrowl.runtime = service;\n"],"names":["root","factory","exports","module","define","amd","a","i","self","__webpack_require__","Symbol","toStringTag","Object","defineProperty","value","service","version","init","finished","_time","startTime","undefined","getSessionTime","sessionTime","Date","getTime","convert","end","total","totalMs","totalS","totalM","totalH","Math","floor","timespan","API","getError","printError","isInit","isInitialized","error","message","errorId","GetLastError","apiError","id","GetErrorString","stack","GetDiagnostic","console","JSON","stringify","errorEvent","CustomEvent","detail","document","dispatchEvent","data","commit","debug","setValue","Commit","warn","exit","Initialized","updateLocation","location","slideId","v1","getLocation","getValue","parse","e","getSuspendData","suspendData","setCourseStart","courseStarted","getProgress","progress","updateProgress","progressPercentage","progressError","previousProgress","parseFloat","start","api","Initialize","statusError","completionStatus","startLocation","cur","m","l","s","max","finish","Terminate","elem","val","SetValue","getRes","GetValue","ZeroPad","pad","res","String","len","length","substr","LMSGetLastError","LMSGetErrorString","LMSGetDiagnostic","LMSCommit","LMSInitialize","lessonStatus","LMSFinish","LMSSetValue","LMSGetValue","_scanApi","win","v","retries","parent","alert","apiPreference","window","assign","Scrowl","runtime"],"sourceRoot":""}