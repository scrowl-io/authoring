{"version":3,"file":"scrowl.template-simple-video.component.js","mappings":"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","sources":["webpack://@scrowl/template-simple-video/./src/simple-video.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './_index.scss';\nimport { SimpleVideoProps } from './simple-video.types';\nimport LazyLoad from 'react-lazyload';\nimport YouTube from 'react-youtube';\nimport Vimeo from 'react-vimeo';\nimport Dailymotion from 'react-dailymotion';\n\nconst SimpleVideo = ({ id, schema, ...props }: SimpleVideoProps) => {\n  const Scrowl = window['Scrowl'];\n  let classes = 'template-simple-video';\n  const Markdown = Scrowl.core.Markdown;\n  const editMode = props.editMode ? true : false;\n  const focusElement = editMode ? props.focusElement : null;\n  const contentId = `${id}-simple-video`;\n  const text = schema.content.text.value;\n  const textFocusCss = focusElement === 'text' && 'has-focus';\n  const videoAssetUrl = schema.content.videoAsset.content.assetUrl?.value;\n  const videoWebUrl = schema.content.videoAsset.content.webUrl?.value;\n  const bgLabel = schema.content.videoAsset.content.alt.value || '';\n  const bgFocusCss = focusElement === 'videoAsset.url' && 'has-focus';\n  const bgRef = useRef<HTMLDivElement>(null);\n  const alignment = schema.content.options.content.alignment.value;\n  const alignmentCss = alignment === 'right' ? 'right' : 'left';\n  const disableAnimations = schema.controlOptions.disableAnimations?.value;\n  const showProgressBar = disableAnimations\n    ? false\n    : schema.content.options.content.showProgress.value;\n  const showProgressRef = useRef(showProgressBar);\n  const slideProgress = useRef(0);\n  const [progressBarStyles, setProgressBarStyles] = useState({\n    width: showProgressBar ? '0%' : '100%',\n  });\n  // @ts-ignore\n  const [videoEnded, setVideoEnded] = useState(false);\n  // const [player, setPlayer] = useState(null);\n  const videoService = useRef('');\n\n  let videoId;\n\n  if (videoWebUrl) {\n    if (videoWebUrl.includes('youtube.com')) {\n      videoService.current = 'youtube';\n      videoId = videoWebUrl.replace('https://www.youtube.com/watch?v=', '');\n    }\n    if (videoWebUrl.includes('vimeo.com')) {\n      videoService.current = 'vimeo';\n      videoId = videoWebUrl.replace('https://vimeo.com/', '');\n    }\n    if (videoWebUrl.includes('dailymotion.com')) {\n      videoService.current = 'dailymotion';\n      videoId = videoWebUrl.replace('https://www.dailymotion.com/video/', '');\n    }\n  }\n\n  if (showProgressBar) {\n    classes += ' show-progress';\n  }\n\n  const handleFocusText = () => {\n    if (editMode) {\n      Scrowl.core.host.sendMessage({\n        type: 'focus',\n        field: 'text',\n      });\n    }\n  };\n\n  const handleFocusBg = () => {\n    if (editMode) {\n      Scrowl.core.host.sendMessage({\n        type: 'focus',\n        field: 'bgImage.url',\n      });\n    }\n  };\n\n  const handleSlideProgress = (ev) => {\n    if (disableAnimations) {\n      return;\n    }\n    slideProgress.current = ev.progress;\n\n    if (showProgressRef.current) {\n      setProgressBarStyles({\n        ...progressBarStyles,\n        width: `${ev.progress}%`,\n      });\n    }\n  };\n\n  const handleSlideEnd = () => {\n    if (disableAnimations) {\n      return;\n    }\n    slideProgress.current = 100;\n\n    if (!showProgressRef.current) {\n      return;\n    }\n\n    setProgressBarStyles({\n      ...progressBarStyles,\n      width: `100%`,\n    });\n  };\n\n  useEffect(() => {\n    showProgressRef.current = showProgressBar;\n    setProgressBarStyles({\n      ...progressBarStyles,\n      width: showProgressBar ? `${slideProgress.current}%` : `100%`,\n    });\n  }, [showProgressBar]);\n\n  const handleVideoEnd = (ev) => {\n    const videoEnded = new CustomEvent('videoEnded', { detail: ev });\n    document.dispatchEvent(videoEnded);\n    console.log('custom event', videoEnded);\n  };\n\n  const onEnd = (ev) => {\n    console.log('finished');\n    handleVideoEnd(ev);\n  };\n\n  // const onStateChange = (ev) => {\n  //   switch (ev.data) {\n  //     case 0:\n\n  //       handleVideoEnd();\n  //   }\n  //   console.log('changed', ev);\n  // };\n\n  const onPause = (ev) => {\n    console.log('PAUSED', ev);\n    if (videoService.current === 'vimeo') {\n      if (ev.data.duration === ev.data.seconds) {\n        console.log('finished');\n        handleVideoEnd(ev);\n      }\n    }\n  };\n\n  // @ts-ignore\n  const opts = {\n    height: '390',\n    width: '640',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      // autoplay: 1,\n    },\n  };\n\n  return (\n    <Scrowl.core.Template\n      id={`slide-${contentId}`}\n      className={classes}\n      onProgress={handleSlideProgress}\n      onEnd={handleSlideEnd}\n      notScene={disableAnimations ? true : false}\n      {...props}\n    >\n      <div id={contentId} className=\"owlui-container\">\n        <div className={`owlui-row ${alignmentCss}`}>\n          <div className={`owlui-col text__wrapper`}>\n            <div className=\"text__container\">\n              <div className=\"progress-indictor\">\n                <div className=\"progress-bar\" style={progressBarStyles}></div>\n              </div>\n              <div\n                className={`text__value can-focus ${textFocusCss}`}\n                onMouseDown={handleFocusText}\n              >\n                <Markdown>{text}</Markdown>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {(videoAssetUrl || videoWebUrl) && (\n          <div\n            ref={bgRef}\n            className={`video__wrapper ${alignmentCss} can-focus ${bgFocusCss} ${'as-side'}`}\n            onMouseDown={handleFocusBg}\n          >\n            {videoWebUrl && !videoAssetUrl && (\n              <div>\n                {videoId && videoService.current === 'youtube' && (\n                  <YouTube videoId={videoId} onPause={onPause} onEnd={onEnd} />\n                )}\n                {videoId && videoService.current === 'dailymotion' && (\n                  <Dailymotion\n                    onEnd={onEnd}\n                    video={videoId}\n                    autoplay={false}\n                    showQueue={false}\n                    autoplayQueue={false}\n                  />\n                )}\n                {videoId && videoService.current === 'vimeo' && (\n                  <Vimeo\n                    className=\"vimeo-player\"\n                    autoplay={true}\n                    videoId={videoId}\n                    onEnd={onEnd}\n                    paused\n                    loop={false}\n                    onPause={onPause}\n                  />\n                )}\n              </div>\n            )}\n\n            {videoAssetUrl && !videoWebUrl && (\n              <LazyLoad offset={250}>\n                <video\n                  controls\n                  onEnded={handleVideoEnd}\n                  className=\"video__container\"\n                  aria-label={bgLabel}\n                >\n                  <source src={videoAssetUrl} />\n                </video>\n              </LazyLoad>\n            )}\n          </div>\n        )}\n      </div>\n    </Scrowl.core.Template>\n  );\n};\n\nexport { SimpleVideo as default };\n"],"names":["SimpleVideo","id","schema","props","Scrowl","window","classes","Markdown","core","editMode","focusElement","contentId","text","content","value","textFocusCss","videoAssetUrl","videoAsset","assetUrl","videoWebUrl","webUrl","bgLabel","alt","bgFocusCss","bgRef","useRef","alignmentCss","options","alignment","disableAnimations","controlOptions","showProgressBar","showProgress","showProgressRef","slideProgress","progressBarStyles","setProgressBarStyles","useState","width","videoEnded","setVideoEnded","videoService","videoId","includes","current","replace","useEffect","handleVideoEnd","ev","CustomEvent","detail","document","dispatchEvent","console","log","onEnd","onPause","data","duration","seconds","Template","className","onProgress","progress","notScene","style","onMouseDown","host","sendMessage","type","field","ref","video","autoplay","showQueue","autoplayQueue","paused","loop","offset","controls","onEnded","src"],"sourceRoot":""}