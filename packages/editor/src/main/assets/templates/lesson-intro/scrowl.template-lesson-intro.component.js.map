{"version":3,"file":"scrowl.template-lesson-intro.component.js","mappings":"+LAKA,MAAMA,EAAc,EAAGC,KAAIC,YAAWC,MACpC,MAAMC,EAASC,OAAe,OAE9B,MAAMC,IAAWH,EAAMG,SACjBC,EAAeD,EAAWH,EAAMI,aAAe,KAC/CC,EAAY,GAAGP,iBACfQ,EAAQP,EAAOQ,QAAQD,MAAME,MACnC,IAAIC,EAAe,wCACnB,MAAMC,EAAWX,EAAOQ,QAAQG,SAASF,MACzC,IAAIG,EAAkB,2CACtB,MAAMC,EAAOb,EAAOQ,QAAQK,KAAKJ,MACjC,IAAIK,EAAc,uCAClB,MAAMC,EAAaf,EAAOQ,QAAQO,WAAWN,MAC7C,IAAIO,EAAoB,+CACxB,MAAMC,EAAKjB,EAAOQ,QAAQU,QAAQV,QAAQS,GAAGR,MACvCU,EAAQnB,EAAOQ,QAAQU,QAAQV,QAAQY,IAAIX,MAC3CY,EAAUrB,EAAOQ,QAAQU,QAAQV,QAAQc,IAAIb,OAAS,GAC5D,IAAIc,EAAY,2BAA0BN,EAAK,QAAU,WACzD,MAAMO,GAAQ,IAAAC,QAAuB,MAC/BC,EAAW,CACfC,gBAAiB,QAAQR,OAO3B,OAJqB,UAAjBd,IACFK,GAAgB,cAGVL,GACN,IAAK,QACHK,GAAgB,aAChB,MACF,IAAK,WACHE,GAAmB,aACnB,MACF,IAAK,OACHE,GAAe,aACf,MACF,IAAK,aACHE,GAAqB,aACrB,MACF,IAAK,cACHO,GAAa,aACb,MACF,QACEK,QAAQC,KAAK,sBAAuBxB,GAoDxC,OACE,kBAACH,EAAO4B,KAAKC,SAAQ,CACnBhC,GAAI,SAASO,IACb0B,UAjGU,wBAkGVC,UAAU,EACVC,MAAO,CAAEC,SAAU,aACflC,GAEJ,yBAAKF,GAAIO,EAAW0B,UAAU,WAC5B,gCACGf,GAAM,yBAAKe,UAAU,YACtB,wBAAIA,UAAWtB,EAAc0B,YA3DZ,KACnBhC,GACFF,EAAO4B,KAAKO,KAAKC,YAAY,CAC3BC,KAAM,QACNC,MAAO,S,GAwDFjC,GAEH,wBAAIyB,UAAWpB,EAAiBwB,YArDZ,KACtBhC,GACFF,EAAO4B,KAAKO,KAAKC,YAAY,CAC3BC,KAAM,QACNC,MAAO,Y,GAkDF7B,GAEFE,GAAQA,EAAK4B,OAAS,GACrB,0BAAMT,UAAWlB,EAAasB,YAhDhB,KAClBhC,GACFF,EAAO4B,KAAKO,KAAKC,YAAY,CAC3BC,KAAM,QACNC,MAAO,Q,GA6CD,kBAACtC,EAAOwC,GAAGC,KAAI,CAACC,KAAK,WAAWC,QAAQ,aACxC,0BAAMb,UAAU,oCAAoCnB,IAGxD,4BACEmB,UAAWhB,EACXoB,YA9CqBU,IAC7B,GAAI1C,EACFF,EAAO4B,KAAKO,KAAKC,YAAY,CAC3BC,KAAM,QACNC,MAAO,mBAEJ,CACL,MAAMO,EAAc,IAAIC,YAAY,cAAe,CAAEC,OAAQH,IAC7DI,SAASC,cAAcJ,E,IAwChBhC,KAGHI,GAASf,IACT,yBAAKgD,IAAK5B,EAAOQ,UAAWT,EAAWa,YAxCzB,KAChBhC,GACFF,EAAO4B,KAAKO,KAAKC,YAAY,CAC3BC,KAAM,QACNC,MAAO,e,GAqCH,yBACER,UAAU,iBAAgB,aACdX,EACZa,MAAOR,MAMlB,C","sources":["webpack://@scrowl/template-lesson-intro/./src/lesson-intro.tsx"],"sourcesContent":["// @ts-ignore\nimport React, { useRef, useState } from 'react';\nimport './_index.scss';\nimport { LessonIntroProps } from './lesson-intro.types';\n\nconst LessonIntro = ({ id, schema, ...props }: LessonIntroProps) => {\n  const Scrowl = window['Scrowl'];\n  let classes = 'template-lesson-intro';\n  const editMode = props.editMode ? true : false;\n  const focusElement = editMode ? props.focusElement : null;\n  const contentId = `${id}-lesson-intro`;\n  const title = schema.content.title.value;\n  let titleClasses = 'template-lesson-intro-title can-focus';\n  const subtitle = schema.content.subtitle.value;\n  let subtitleClasses = 'template-lesson-intro-subtitle can-focus';\n  const time = schema.content.time.value;\n  let timeClasses = 'template-lesson-intro-time can-focus';\n  const startLabel = schema.content.startLabel.value;\n  let startLabelClasses = 'template-lesson-intro-start-button can-focus';\n  const bg = schema.content.bgImage.content.bg.value;\n  const bgUrl = schema.content.bgImage.content.url.value;\n  const bgLabel = schema.content.bgImage.content.alt.value || '';\n  let bgClasses = `img__wrapper can-focus ${bg ? 'as-bg' : 'as-hero'}`;\n  const bgRef = useRef<HTMLDivElement>(null);\n  const bgStyles = {\n    backgroundImage: `url(\"${bgUrl}\")`,\n  };\n\n  if (focusElement === 'title') {\n    titleClasses += ' has-focus';\n  }\n\n  switch (focusElement) {\n    case 'title':\n      titleClasses += ' has-focus';\n      break;\n    case 'subtitle':\n      subtitleClasses += ' has-focus';\n      break;\n    case 'time':\n      timeClasses += ' has-focus';\n      break;\n    case 'startLabel':\n      startLabelClasses += ' has-focus';\n      break;\n    case 'bgImage.url':\n      bgClasses += ' has-focus';\n      break;\n    default:\n      console.warn('Unsupported element', focusElement);\n      break;\n  }\n\n  const handleFocusTitle = () => {\n    if (editMode) {\n      Scrowl.core.host.sendMessage({\n        type: 'focus',\n        field: 'title',\n      });\n    }\n  };\n\n  const handleFocusSubtitle = () => {\n    if (editMode) {\n      Scrowl.core.host.sendMessage({\n        type: 'focus',\n        field: 'subtitle',\n      });\n    }\n  };\n\n  const handleFocusTime = () => {\n    if (editMode) {\n      Scrowl.core.host.sendMessage({\n        type: 'focus',\n        field: 'time',\n      });\n    }\n  };\n\n  const handleFocusStartLabel = (ev) => {\n    if (editMode) {\n      Scrowl.core.host.sendMessage({\n        type: 'focus',\n        field: 'startLabel',\n      });\n    } else {\n      const startCourse = new CustomEvent('startCourse', { detail: ev });\n      document.dispatchEvent(startCourse);\n    }\n  };\n\n  const handleFocusBg = () => {\n    if (editMode) {\n      Scrowl.core.host.sendMessage({\n        type: 'focus',\n        field: 'bgImage.url',\n      });\n    }\n  };\n\n  return (\n    <Scrowl.core.Template\n      id={`slide-${contentId}`}\n      className={classes}\n      notScene={true}\n      style={{ overflow: 'hidden' }}\n      {...props}\n    >\n      <div id={contentId} className=\"content\">\n        <header>\n          {bg && <div className=\"overlay\" />}\n          <h1 className={titleClasses} onMouseDown={handleFocusTitle}>\n            {title}\n          </h1>\n          <h2 className={subtitleClasses} onMouseDown={handleFocusSubtitle}>\n            {subtitle}\n          </h2>\n          {time && time.length > 0 && (\n            <span className={timeClasses} onMouseDown={handleFocusTime}>\n              <Scrowl.ui.Icon icon=\"schedule\" display=\"outlined\" />\n              <span className=\"template-lesson-intro-time-value\">{time}</span>\n            </span>\n          )}\n          <button\n            className={startLabelClasses}\n            onMouseDown={handleFocusStartLabel}\n          >\n            {startLabel}\n          </button>\n        </header>\n        {(bgUrl || editMode) && (\n          <div ref={bgRef} className={bgClasses} onMouseDown={handleFocusBg}>\n            <img\n              className=\"img__container\"\n              aria-label={bgLabel}\n              style={bgStyles}\n            />\n          </div>\n        )}\n      </div>\n    </Scrowl.core.Template>\n  );\n};\n\nexport { LessonIntro as default };\n"],"names":["LessonIntro","id","schema","props","Scrowl","window","editMode","focusElement","contentId","title","content","value","titleClasses","subtitle","subtitleClasses","time","timeClasses","startLabel","startLabelClasses","bg","bgImage","bgUrl","url","bgLabel","alt","bgClasses","bgRef","useRef","bgStyles","backgroundImage","console","warn","core","Template","className","notScene","style","overflow","onMouseDown","host","sendMessage","type","field","length","ui","Icon","icon","display","ev","startCourse","CustomEvent","detail","document","dispatchEvent","ref"],"sourceRoot":""}